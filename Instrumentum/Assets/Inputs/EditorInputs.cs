//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/Editor.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Instrumentum.UI
{
    public partial class @EditorInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @EditorInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Editor"",
    ""maps"": [
        {
            ""name"": ""Editor"",
            ""id"": ""d6762c68-3a1d-4f83-8e12-e4a29ebbf920"",
            ""actions"": [
                {
                    ""name"": ""Qauntization Down"",
                    ""type"": ""Button"",
                    ""id"": ""70471af8-7d9b-4471-aca0-cf7b504924f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Qauntization Up"",
                    ""type"": ""Button"",
                    ""id"": ""a07dad96-e3fe-465d-8379-ae884bf8a25e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Move"",
                    ""type"": ""Value"",
                    ""id"": ""a2c04098-19e5-4ec2-bbd6-7d71eb8e9813"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""89ca8bfc-2e38-4f40-ae3e-4e591d745135"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Click"",
                    ""type"": ""Button"",
                    ""id"": ""57ad2652-2d1e-4357-ad6d-ac28f80e4626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Play"",
                    ""type"": ""Button"",
                    ""id"": ""43f19488-31c9-4286-b64f-4f7544c5e6e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4efe3b17-608a-4619-ba26-cbd3df20ccdf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Qauntization Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""429c05b2-cfcb-44a4-bc1c-88b6b70e0fa5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Mouse Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbb81c5e-7f57-4e24-88b6-d4f073ee8089"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Qauntization Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1cd369f-c10b-459e-96c5-43f8ddc173f2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfec9ecf-89fe-4ee6-9e73-1662da3480ae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Right Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d2a942a-5198-4fb5-a4fd-8d96deed0032"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Editor"",
                    ""action"": ""Toggle Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Editor"",
            ""bindingGroup"": ""Editor"",
            ""devices"": []
        }
    ]
}");
            // Editor
            m_Editor = asset.FindActionMap("Editor", throwIfNotFound: true);
            m_Editor_QauntizationDown = m_Editor.FindAction("Qauntization Down", throwIfNotFound: true);
            m_Editor_QauntizationUp = m_Editor.FindAction("Qauntization Up", throwIfNotFound: true);
            m_Editor_MouseMove = m_Editor.FindAction("Mouse Move", throwIfNotFound: true);
            m_Editor_Click = m_Editor.FindAction("Click", throwIfNotFound: true);
            m_Editor_RightClick = m_Editor.FindAction("Right Click", throwIfNotFound: true);
            m_Editor_TogglePlay = m_Editor.FindAction("Toggle Play", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Editor
        private readonly InputActionMap m_Editor;
        private List<IEditorActions> m_EditorActionsCallbackInterfaces = new List<IEditorActions>();
        private readonly InputAction m_Editor_QauntizationDown;
        private readonly InputAction m_Editor_QauntizationUp;
        private readonly InputAction m_Editor_MouseMove;
        private readonly InputAction m_Editor_Click;
        private readonly InputAction m_Editor_RightClick;
        private readonly InputAction m_Editor_TogglePlay;
        public struct EditorActions
        {
            private @EditorInputs m_Wrapper;
            public EditorActions(@EditorInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @QauntizationDown => m_Wrapper.m_Editor_QauntizationDown;
            public InputAction @QauntizationUp => m_Wrapper.m_Editor_QauntizationUp;
            public InputAction @MouseMove => m_Wrapper.m_Editor_MouseMove;
            public InputAction @Click => m_Wrapper.m_Editor_Click;
            public InputAction @RightClick => m_Wrapper.m_Editor_RightClick;
            public InputAction @TogglePlay => m_Wrapper.m_Editor_TogglePlay;
            public InputActionMap Get() { return m_Wrapper.m_Editor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EditorActions set) { return set.Get(); }
            public void AddCallbacks(IEditorActions instance)
            {
                if (instance == null || m_Wrapper.m_EditorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_EditorActionsCallbackInterfaces.Add(instance);
                @QauntizationDown.started += instance.OnQauntizationDown;
                @QauntizationDown.performed += instance.OnQauntizationDown;
                @QauntizationDown.canceled += instance.OnQauntizationDown;
                @QauntizationUp.started += instance.OnQauntizationUp;
                @QauntizationUp.performed += instance.OnQauntizationUp;
                @QauntizationUp.canceled += instance.OnQauntizationUp;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @TogglePlay.started += instance.OnTogglePlay;
                @TogglePlay.performed += instance.OnTogglePlay;
                @TogglePlay.canceled += instance.OnTogglePlay;
            }

            private void UnregisterCallbacks(IEditorActions instance)
            {
                @QauntizationDown.started -= instance.OnQauntizationDown;
                @QauntizationDown.performed -= instance.OnQauntizationDown;
                @QauntizationDown.canceled -= instance.OnQauntizationDown;
                @QauntizationUp.started -= instance.OnQauntizationUp;
                @QauntizationUp.performed -= instance.OnQauntizationUp;
                @QauntizationUp.canceled -= instance.OnQauntizationUp;
                @MouseMove.started -= instance.OnMouseMove;
                @MouseMove.performed -= instance.OnMouseMove;
                @MouseMove.canceled -= instance.OnMouseMove;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @TogglePlay.started -= instance.OnTogglePlay;
                @TogglePlay.performed -= instance.OnTogglePlay;
                @TogglePlay.canceled -= instance.OnTogglePlay;
            }

            public void RemoveCallbacks(IEditorActions instance)
            {
                if (m_Wrapper.m_EditorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IEditorActions instance)
            {
                foreach (var item in m_Wrapper.m_EditorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_EditorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public EditorActions @Editor => new EditorActions(this);
        private int m_EditorSchemeIndex = -1;
        public InputControlScheme EditorScheme
        {
            get
            {
                if (m_EditorSchemeIndex == -1) m_EditorSchemeIndex = asset.FindControlSchemeIndex("Editor");
                return asset.controlSchemes[m_EditorSchemeIndex];
            }
        }
        public interface IEditorActions
        {
            void OnQauntizationDown(InputAction.CallbackContext context);
            void OnQauntizationUp(InputAction.CallbackContext context);
            void OnMouseMove(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnTogglePlay(InputAction.CallbackContext context);
        }
    }
}
